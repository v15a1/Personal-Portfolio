{"version":3,"sources":["logo.svg","assets/logo.jsx","components/appbar/appbar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","width","height","viewBox","fill","xmlns","d","useStyles","makeStyles","root","flexGrow","logo","Header","classes","React","useState","value","setValue","className","AppBar","position","color","Toolbar","style","alignItems","justifyContent","Grid","container","justifySelf","item","Container","justify","Tabs","onChange","e","v","aria-label","Tab","label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,qLCE9BC,EAAO,WAClB,OACE,yBACEC,MAAM,GACNC,OAAO,GACPC,QAAQ,cACRC,KAAK,OACLC,MAAM,8BAEN,0BACEC,EAAE,gGACFF,KAAK,UAEP,0BACEE,EAAE,mhBACFF,KAAK,YCRPG,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJV,MAAO,IACPC,OAAQ,SAqCGU,EAjCA,WACb,IAAMC,EAAUN,IADG,EAEOO,IAAMC,SAAS,GAFtB,mBAEZC,EAFY,KAELC,EAFK,KAInB,OACE,yBAAKC,UAAWL,EAAQJ,MACtB,kBAACU,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9B,kBAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,WAAY,SAAUC,eAAgB,WACtD,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMH,MAAO,CAAEK,YAAa,cAAgBC,MAAI,GAC9C,kBAACC,EAAA,EAAD,CAAWZ,UAAWL,EAAQF,MAC5B,kBAAC,EAAD,QAGJ,kBAACe,EAAA,EAAD,CAAMG,MAAI,GACR,kBAACH,EAAA,EAAD,CAAMK,QAAS,YACb,kBAACC,EAAA,EAAD,CACEC,SAAU,SAACC,EAAGC,GAAJ,OAAUlB,EAASkB,IAC7BnB,MAAOA,EACPoB,aAAW,mBAEX,kBAACC,EAAA,EAAD,CAAKC,MAAO,WACZ,kBAACD,EAAA,EAAD,CAAKC,MAAO,mBC5BfC,MARf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,QCIcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a80ba25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nexport const Logo = () => {\n  return (\n    <svg\n      width=\"\"\n      height=\"\"\n      viewBox=\"0 0 408 304\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M223.81 1.83133L143.257 304H74.6033L0 1.83133H54.0073L113.964 269.663L173.464 1.83133H223.81Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M387.404 84.6988C387.404 105.454 382.064 123.157 371.385 137.807C361.011 152.458 346.67 162.378 328.362 167.566L408 304H349.416L267.947 159.325C266.117 155.968 265.201 152.916 265.201 150.169C288.086 150.169 305.02 145.133 316.005 135.06C326.989 124.683 332.481 108.506 332.481 86.5301C332.481 68.2169 327.752 54.6345 318.293 45.7831C309.139 36.6265 294.951 32.0482 275.728 32.0482C266.269 32.0482 256.505 32.8112 246.436 34.3373V304H192.886V3.66266C228.891 1.22089 257.573 0 278.932 0C351.247 0 387.404 28.2329 387.404 84.6988Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n};\n","import AppBar from \"@material-ui/core/AppBar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport React from \"react\";\nimport { Tabs, Container } from \"@material-ui/core\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { Logo } from \"../../assets/logo\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  },\n  logo: {\n    width: 135,\n    height: 43.54\n  }\n});\n\nconst Header = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <nav className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n          <Grid container>\n            <Grid style={{ justifySelf: \"flex-start\" }} item>\n              <Container className={classes.logo}>\n                <Logo/>\n              </Container>\n            </Grid>\n            <Grid item>\n              <Grid justify={\"flex-end\"}>\n                <Tabs\n                  onChange={(e, v) => setValue(v)}\n                  value={value}\n                  aria-label=\"Navigation Tabs\"\n                >\n                  <Tab label={\"page 1\"} />\n                  <Tab label={\"page 2\"} />\n                </Tabs>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/appbar/appbar.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}